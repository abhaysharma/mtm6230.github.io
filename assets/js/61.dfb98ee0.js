(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{221:function(a,e,t){"use strict";t.r(e);var r=t(0),s=Object(r.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"content"},[a._m(0),a._v(" "),t("Youtube",{attrs:{id:"RpU7NezV8PM",citation:"griffith"}}),a._v(" "),t("p",[a._v("One of most basic component of any programming language is a variable. A variable is container for a value and given an identifier. In most cases the value of the variable can change, while the identifier will stay the same.")]),a._v(" "),a._m(1),a._v(" "),t("Scrimba",{attrs:{id:"/p/pPPeCy/cWVbdcL",citation:"israel"}}),a._v(" "),t("p",[a._v("In JavaScript, a variable must be declared before it can be used. A variable is declared by using a declaring statement followed by the variable identifier.")]),a._v(" "),t("p",[a._v("Depending on the declaring statement used the declared variable can or must be assigned a value. The equal sign ( = ) is the variable assignment operator. There are 3 declaring statements in JavaScript, "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",target:"_blank",rel:"noopener noreferrer"}},[a._v("var"),t("OutboundLink")],1),a._v(", "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",target:"_blank",rel:"noopener noreferrer"}},[a._v("let"),t("OutboundLink")],1),a._v(", and "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",target:"_blank",rel:"noopener noreferrer"}},[a._v("const"),t("OutboundLink")],1),a._v(".")]),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"Declaring a Variable",src:"//codepen.io/IMD/embed/VyBapb/?height=177&theme-id=0&default-tab=js&embed-version=2",width:"300",height:"177",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/VyBapb/"&amp;amp;amp;amp;amp;gt;Declaring a Variable&amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;gt;.')]),a._v(" "),a._m(2),a._v(" "),a._m(3),a._v(" "),t("p",[a._v("Each declaring statement will cause the variable that declared with it to act a little different. Below is a brief explain of those differences.")]),a._v(" "),a._m(4),a._v(" "),a._m(5),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"var Statement",src:"//codepen.io/IMD/embed/OzwMBj/?height=365&theme-id=0&default-tab=js,result&embed-version=2",width:"300",height:"365",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/OzwMBj/"&amp;amp;amp;amp;amp;amp;amp;amp;gt;var Statement&amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;amp;amp;gt;.')]),a._v(" "),a._m(6),a._v(" "),a._m(7),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"let Statement",src:"//codepen.io/IMD/embed/wpxMVy/?height=422&theme-id=0&default-tab=js,result&embed-version=2",width:"300",height:"422",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/wpxMVy/"&amp;amp;amp;amp;amp;amp;gt;let Statement&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;.')]),a._v(" "),a._m(8),a._v(" "),a._m(9),a._v(" "),t("iframe",{staticStyle:{width:"100%"},attrs:{title:"const Statement",src:"//codepen.io/IMD/embed/dJjMGO/?height=456&theme-id=0&default-tab=js,result&embed-version=2",width:"300",height:"456",allowfullscreen:"allowfullscreen"}},[a._v('See the Pen &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD/pen/dJjMGO/"&amp;amp;amp;amp;amp;amp;gt;const Statement&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt; by IMD (&amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io/IMD"&amp;amp;amp;amp;amp;amp;gt;@IMD&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;) on &amp;amp;amp;amp;amp;amp;lt;a href="https://codepen.io"&amp;amp;amp;amp;amp;amp;gt;CodePen&amp;amp;amp;amp;amp;amp;lt;/a&amp;amp;amp;amp;amp;amp;gt;.')]),a._v(" "),a._m(10),a._v(" "),t("p",[a._v("Variables can hold different values and these values can be broken down into different categories known as Data Types. In JavaScript, data types are divided into two categories Primitive Data Types and Objects.")]),a._v(" "),a._m(11),a._v(" "),t("p",[a._v("The primitive data types are as follows:")]),a._v(" "),a._m(12),a._v(" "),t("p",[a._v("Primitive data types define immutable values or value that are cannot be changed. This means the specific value cannot change, not the variable holding that value. For example, value of the Number 2 is always 2, you cannot change that.")]),a._v(" "),a._m(13),a._v(" "),t("p",[a._v("In JavaScript, an object consider to be a collection of properties. These properties are stored in a key value pairs. The key is used to identified properties, and values can be a value of any type.")]),a._v(" "),t("p",[a._v("Any data structure that is not a primitive data type is an object including:")]),a._v(" "),a._m(14),a._v(" "),a._m(15)],1)},[function(){var a=this.$createElement,e=this._self._c||a;return e("h1",{attrs:{id:"variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variables","aria-hidden":"true"}},[this._v("#")]),this._v(" Variables")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h2",{attrs:{id:"declaring-a-variable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#declaring-a-variable","aria-hidden":"true"}},[this._v("#")]),this._v(" Declaring a Variable")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h2",{attrs:{id:"var-vs-let-vs-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-vs-let-vs-const","aria-hidden":"true"}},[this._v("#")]),this._v(" var vs let vs const")])},function(){var a=this.$createElement,e=this._self._c||a;return e("p",[this._v("In 1995, when JavaScript was first created, it had only one declaring statement "),e("code",[this._v("var")]),this._v(". For two decades it was the de facto way of declaring variables. Then in July 2015, the version of JavaScript known as ES2015 or ES6 was released and with it came two new declaring statement, "),e("code",[this._v("let")]),this._v(" and "),e("code",[this._v("const")]),this._v(".")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h3",{attrs:{id:"var"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var","aria-hidden":"true"}},[this._v("#")]),this._v(" var")])},function(){var a=this.$createElement,e=this._self._c||a;return e("p",[this._v("The "),e("code",[this._v("var")]),this._v(" statement is used to declare a variable that has function scope or is accessible anywhere within a function. If declared outside of a function it will be given global scope and be added to the global object. Variables declared with "),e("code",[this._v("var")]),this._v(" do not need to be assigned a value, can be re-assigned a value, and can be redeclared without an error.")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h3",{attrs:{id:"let"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let","aria-hidden":"true"}},[this._v("#")]),this._v(" let")])},function(){var a=this.$createElement,e=this._self._c||a;return e("p",[this._v("The "),e("code",[this._v("let")]),this._v(" statement is used to declare a variable that has block scope or is accessible anywhere within a block or a set of curly braces. If declared outside of a function or block it will be given global scope but is NOT added to the global object. Variables declared with "),e("code",[this._v("let")]),this._v(" do not need to be assigned a value, can be re-assigned a value, but CANNOT be redeclared and will result in an error.")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h3",{attrs:{id:"const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const","aria-hidden":"true"}},[this._v("#")]),this._v(" const")])},function(){var a=this.$createElement,e=this._self._c||a;return e("p",[this._v("The "),e("code",[this._v("const")]),this._v(" statement is used to declare a variable that has block scope or is accessible anywhere within a block or a set of curly braces. If declared outside of a function or block it will be given global scope but is NOT added to the global object. Variables declared with "),e("code",[this._v("const")]),this._v(" MUST to be assigned a value, CANNOT be re-assigned a value, and CANNOT be redeclared. If any of these situation occur it will result in an error.")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h2",{attrs:{id:"data-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-types","aria-hidden":"true"}},[this._v("#")]),this._v(" Data Types")])},function(){var a=this.$createElement,e=this._self._c||a;return e("h3",{attrs:{id:"primitive-data-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#primitive-data-types","aria-hidden":"true"}},[this._v("#")]),this._v(" Primitive Data Types")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ul",[t("li",[t("a",{staticClass:"glossaryLink",attrs:{title:"Boolean: In computer science, a boolean is a logical data type that can have only the values true or false.",href:"https://developer.mozilla.org/en-US/docs/Glossary/Boolean"}},[a._v("Boolean")])]),a._v(" "),t("li",[t("a",{staticClass:"glossaryLink",attrs:{title:"Null: In computer science, a null value represents a reference that points, generally intentionally, to a nonexistent or invalid object or address. The meaning of a null reference varies among language implementations.",href:"https://developer.mozilla.org/en-US/docs/Glossary/Null"}},[a._v("Null")])]),a._v(" "),t("li",[t("a",{staticClass:"glossaryLink",attrs:{title:"Undefined: A primitive value automatically assigned to variables that have just been declared or to formal arguments for which there are no actual arguments.",href:"https://developer.mozilla.org/en-US/docs/Glossary/Undefined"}},[a._v("Undefined")])]),a._v(" "),t("li",[t("a",{staticClass:"glossaryLink",attrs:{title:"Number: In JavaScript, Number is a numeric data type in the double-precision 64-bit floating point format (IEEE 754). In other programming languages different numeric types can exist, for examples: Integers, Floats, Doubles, or Bignums.",href:"https://developer.mozilla.org/en-US/docs/Glossary/Number"}},[a._v("Number")])]),a._v(" "),t("li",[t("a",{staticClass:"glossaryLink",attrs:{title:"String: In any computer programming language, a string is a sequence of characters used to represent text.",href:"https://developer.mozilla.org/en-US/docs/Glossary/String"}},[a._v("String")])]),a._v(" "),t("li",[t("a",{staticClass:"glossaryLink",attrs:{title:'Symbol: This glossary page describes both a data type, called "symbol", and the class-like function, called "Symbol()", that (among other things) creates instances of the symbol data type.',href:"https://developer.mozilla.org/en-US/docs/Glossary/Symbol"}},[a._v("Symbol")]),a._v(" (new in ES2015)")])])},function(){var a=this.$createElement,e=this._self._c||a;return e("h3",{attrs:{id:"objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objects","aria-hidden":"true"}},[this._v("#")]),this._v(" Objects")])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ul",[t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener"}},[a._v("Arrays")])]),a._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener"}},[a._v("Functions")])]),a._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener"}},[a._v("Maps")])]),a._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener"}},[a._v("Object")])]),a._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",target:"_blank",rel:"noopener"}},[a._v("Sets")])])])},function(){var a=this.$createElement,e=this._self._c||a;return e("p",[this._v("To learn more review the documentation on the Mozilla Developer Network on "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener"}},[this._v("JavaScript Data Types and Data Structures")]),this._v(".")])}],!1,null,null,null);s.options.__file="README.md";e.default=s.exports}}]);